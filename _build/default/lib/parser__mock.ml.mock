
type token = 
  | WHILE
  | VAR
  | UMINUS
  | TYPE
  | TO
  | TIMES
  | THEN
  | STRING of (
# 5 "lib/parser.mly"
       (string)
# 14 "lib/parser__mock.ml.mock"
)
  | SEMICOLON
  | RPAREN
  | RBRACK
  | RBRACE
  | PLUS
  | OR
  | OF
  | NIL
  | NEQ
  | MINUS
  | LT
  | LPAREN
  | LET
  | LE
  | LBRACK
  | LBRACE
  | INT of (
# 4 "lib/parser.mly"
       (int)
# 35 "lib/parser__mock.ml.mock"
)
  | IN
  | IF
  | ID of (
# 3 "lib/parser.mly"
       (string)
# 42 "lib/parser__mock.ml.mock"
)
  | GT
  | GE
  | FUNCTION
  | FOR
  | EQ
  | EOF
  | END
  | ELSE
  | DOT
  | DO
  | DIVIDE
  | COMMA
  | COLON
  | BREAK
  | ASSIGN
  | ARRAY
  | AND

# 15 "lib/parser.mly"
   open Syntax 
# 64 "lib/parser__mock.ml.mock"

let menhir_begin_marker =
  0

and xv_main =
  let _ = fun (_startpos : Lexing.position) (_endpos : Lexing.position) (_endpos__0_ : Lexing.position) (_symbolstartpos : Lexing.position) (_startofs : int) (_endofs : int) (_endofs__0_ : int) (_symbolstartofs : int) (_sloc : Lexing.position * Lexing.position) (_loc : Lexing.position * Lexing.position) (
# 25 "lib/parser.mly"
   _1
# 73 "lib/parser__mock.ml.mock"
   : unit) (_startpos__1_ : Lexing.position) (_endpos__1_ : Lexing.position) (_startofs__1_ : int) (_endofs__1_ : int) (_loc__1_ : Lexing.position * Lexing.position) ->
    ((
# 25 "lib/parser.mly"
        (Nothing)
# 78 "lib/parser__mock.ml.mock"
     : 'tv_main) : (
# 14 "lib/parser.mly"
       (Syntax.expr)
# 82 "lib/parser__mock.ml.mock"
    )) in
  let _ = fun (_startpos : Lexing.position) (_endpos : Lexing.position) (_endpos__0_ : Lexing.position) (_symbolstartpos : Lexing.position) (_startofs : int) (_endofs : int) (_endofs__0_ : int) (_symbolstartofs : int) (_sloc : Lexing.position * Lexing.position) (_loc : Lexing.position * Lexing.position) (
# 24 "lib/parser.mly"
   _1
# 87 "lib/parser__mock.ml.mock"
   : (
# 4 "lib/parser.mly"
       (int)
# 91 "lib/parser__mock.ml.mock"
  )) (_startpos__1_ : Lexing.position) (_endpos__1_ : Lexing.position) (_startofs__1_ : int) (_endofs__1_ : int) (_loc__1_ : Lexing.position * Lexing.position) ->
    ((
# 24 "lib/parser.mly"
        (ELiteral _1)
# 96 "lib/parser__mock.ml.mock"
     : 'tv_main) : (
# 14 "lib/parser.mly"
       (Syntax.expr)
# 100 "lib/parser__mock.ml.mock"
    )) in
  ((let rec diverge() = diverge() in diverge()) : 'tv_main)

and menhir_end_marker =
  0
