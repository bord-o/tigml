type token =
    WHILE
  | VAR
  | TYPE
  | TO
  | TIMES
  | THEN
  | STRING of string
  | SEMICOLON
  | RPAREN
  | RBRACK
  | RBRACE
  | PLUS
  | OR
  | OF
  | NIL
  | NEQ
  | MINUS
  | LT
  | LPAREN
  | LET
  | LE
  | LBRACK
  | LBRACE
  | INT of int
  | IN
  | IF
  | ID of string
  | GT
  | GE
  | FUNCTION
  | FOR
  | EQ
  | EOF
  | END
  | ELSE
  | DOT
  | DO
  | DIVIDE
  | COMMA
  | COLON
  | BREAK
  | ASSIGN
  | ARRAY
  | AND
val debug : bool
val pp : string -> unit
val menhir_begin_marker : int
val xv_vardec : Absyn.dec
val xv_tyfields : Absyn.field list
val xv_tydec : Absyn.dec
val xv_ty : Absyn.ty
val xv_recordargs : (string * Absyn.exp * Lexing.position) list
val xv_optexp : Absyn.exp
val xv_main : Absyn.exp
val xv_lvalue_exp : Absyn.var
val xv_lvalue : Absyn.var
val xv_fundec : Absyn.dec
val xv_explist : Absyn.exp list
val xv_exp : Absyn.exp
val xv_empty : Absyn.exp
val xv_decs : Absyn.dec list
val xv_dec : Absyn.dec
val menhir_end_marker : int
